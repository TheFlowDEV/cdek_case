import telebot
from io import BytesIO
import numpy as np
from telebot import types
from googletrans import Translator
import keras
from tensorflow.keras import models
import numpy as np
from PIL import Image
import pickle
import cv2

TELEGRAM_API_TOKEN = '7532048730:AAGDuCvqvWcsGP2pddWqZSc4NqM96vY4Ncw'
bot = telebot.TeleBot(TELEGRAM_API_TOKEN)
# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫
info_text1 = f'–ë–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Kodiki –Ω–∞ –•–∞–∫–∞—Ç–æ–Ω–µ-–¢–ü–£ 11-13.09.2024‚ù§Ô∏è'
markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_analyse_product = types.InlineKeyboardButton('–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üõí')
button_info1 = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì')
markup1.add(button_analyse_product, button_info1)
# –ù–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ–ª—è
info_text2 = '–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ò –æ–ø–∏—Å–∞–Ω–∏–µ.'
markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_get_desc = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
button_get_photo = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
button_analyse = types.KeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑")
button_info2 = types.KeyboardButton("–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
markup2.add(button_get_desc, button_get_photo, button_analyse, button_info2)

model = models.load_model('AI_CDEK.keras')

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
product_desc = ''


# –í—Å—Ç—Ä–µ—á–∞ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    if message.text == '/start':
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç!üñê –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å–∞–π—Ç–∞ CDEK', reply_markup=markup1)
        bot.register_next_step_handler(message, second_message)
    else:
        bot.send_message(message.chat.id, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: /start')


#
def second_message(message):
    if message.text == '–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üõí':
        bot.send_message(message.chat.id, '–¢—Ä–µ–±—É—é—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ/—Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: ', reply_markup=markup2)
        bot.register_next_step_handler(message, third_message)

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì':
        bot.send_message(message.chat.id, info_text1)
        bot.register_next_step_handler(message, second_message)


# –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑
def third_message(message):
    if message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        cid = message.chat.id
        msg = message
        bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')

        @bot.message_handler(commands=['text'])
        def record_desc(message):
            product_desc = message.text
            bot.reply_to(message, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.')

        bot.register_next_step_handler(msg, third_message)
    elif message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ':
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ: ")
        bot.register_next_step_handler(message, third_message)  # –∑–∞—Ç—ã—á–∫–∞


    elif message.text == '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑':  # & (product[] != '' |[]): #—Ö–∑ —Ö–∑
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑..........")
        ####################################################
        #                                                  #
        #                 –†–∞–±–æ—Ç–∫–∞ –¥–ª—è –ò–ò                   #
        #                                                  #
        ####################################################
        bot.register_next_step_handler(message, third_message)


    elif message.text == '–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, info_text2)
        bot.register_next_step_handler(message, third_message)

    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!')
        bot.register_next_step_handler(message, third_message)


bot.infinity_polling()