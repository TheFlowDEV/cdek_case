import telebot
from io import BytesIO
import numpy as np
from telebot import types
from googletrans import Translator
import keras
from random import randint, choice, shuffle
from random import randint, choice, shuffle
from tensorflow.keras import models
import numpy as np
from PIL import Image
import pickle
import cv2

TELEGRAM_API_TOKEN = '7532048730:AAGDuCvqvWcsGP2pddWqZSc4NqM96vY4Ncw'
bot = telebot.TeleBot(TELEGRAM_API_TOKEN)
# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫
photo = ''
desc_text = ''


def get_users():
    global users
    f = open('users.txt', 'rt').readlines()
    users_data = {}
    for i in f:
        print(i.split('%'))
        name, desc, ph = i.split('%')
        users_data[int(name)] = [desc, ph]

    return users_data


users = get_users()
print(users)


def save_data():
    global users
    f = open('users.txt', 'wt')
    s = ''
    for i in users.items():
        name, lst = i
        s += f'{name}%{lst[0]}%{lst[1]}\n'
    f.write(s)
    f.close()


info_text1 = f'–ë–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Kodiki –Ω–∞ –•–∞–∫–∞—Ç–æ–Ω–µ-–¢–ü–£ 11-13.09.2024‚ù§Ô∏è'
markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_analyse_product = types.InlineKeyboardButton('–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üõí')
button_info1 = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì')
markup1.add(button_analyse_product, button_info1)
# –ù–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ–ª—è
info_text2 = '–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ò –æ–ø–∏—Å–∞–Ω–∏–µ.'
markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_get_desc = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
button_get_photo = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
button_analyse = types.KeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑")
button_info2 = types.KeyboardButton("–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
markup2.add(button_get_desc, button_get_photo, button_analyse, button_info2)

markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_yes = types.KeyboardButton("–î–∞")
button_no = types.KeyboardButton("–ù–µ—Ç")
markup3.add(button_yes, button_no)

markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_yes = types.KeyboardButton("–î–∞")
button_no = types.KeyboardButton("–ù–µ—Ç")
markup3.add(button_yes, button_no)

model = models.load_model('AI_CDEK.keras')

with open("vec_and_le.pkl", 'rb') as f:
    label_encoder, vectorizer = pickle.load(f)


with open("vec_and_le.pkl", 'rb') as f:
    label_encoder, vectorizer = pickle.load(f)


# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ


# –í—Å—Ç—Ä–µ—á–∞ –∫–ª–∏–µ–Ω—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    if message.text == '/start':
        if message.chat.id not in users:
            users[message.chat.id] = ['', '']
        if message.chat.id not in users:
            users[message.chat.id] = ['', '']
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç!üñê –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å–∞–π—Ç–∞ CDEK', reply_markup=markup1)
        bot.register_next_step_handler(message, second_message)
    else:
        bot.send_message(message.chat.id, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: /start')


#
def second_message(message):
    if message.text == '–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üõí':
        bot.send_message(message.chat.id, '–¢—Ä–µ–±—É—é—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ/—Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: ', reply_markup=markup2)

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì':
        bot.send_message(message.chat.id, info_text1)
        bot.register_next_step_handler(message, second_message)


# –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑

@bot.message_handler(content_types=['photo'])
def get_image(message):
    global photo
    raw = message.photo[-1].file_id
    name = raw + ".jpg"
    file_info = bot.get_file(raw)
    downloaded_file = bot.download_file(file_info.file_path)
    rand_name = str(randint(1, 100000)) + choice(
        '132423rksjhfkjdkgdkfhgkjslakjlkgfhsldjglkhdslkjghlkfhskljajklg') + '.jpg'
    with open(f'uploads/{rand_name}', 'wb') as new_file:
        new_file.write(downloaded_file)
    img = open(f'uploads/{rand_name}', 'rb')
    bot.reply_to(message, "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    users[message.chat.id][1] = f'uploads/{rand_name}'
    save_data()


@bot.message_handler(content_types=['text'])
def msg(message):
    global photo, desc_text
    if message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':

        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')

        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    elif message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ':
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ: ")  # –∑–∞—Ç—ã—á–∫–∞
        bot.register_next_step_handler(message, get_image)
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ: ")  # –∑–∞—Ç—ã—á–∫–∞
        bot.register_next_step_handler(message, get_image)


    elif message.text == '–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, info_text2)


    elif message.text == '–î–∞':
        if not users[message.chat.id][1]:
            bot.send_message(message.chat.id, '–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
        if not users[message.chat.id][0]:
            bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
        else:
            try:
                image = cv2.resize(np.array(Image.open(users[message.chat.id][1])), (128, 128))
                TEXT_DATA = [vectorizer.transform([users[message.chat.id][0]]).toarray()]

                predict = model.predict(x=[np.array([image]), TEXT_DATA])
                metka = predict.argmax(axis=-1)[0]
                label_encoder_dd = label_encoder.inverse_transform([metka])[0]

                # predict = np.sort(predict)
                # ans =label_encoder_dd[0]
                # for i in range(1, len(str(label_encoder_dd))):
                #     if label_encoder_dd[i].isupper():
                #         ans += str(' / ') + label_encoder_dd[i]
                #     else:
                #         ans += label_encoder_dd[i]

                top_10_indices = np.argsort(predict[0])[::-1][:10]

                top_10_probabilities = predict[0][top_10_indices]

                top_10_labels = label_encoder.inverse_transform(top_10_indices)
                ans = ''
                for label, probability in zip(top_10_labels, top_10_probabilities):
                    s = label[0]
                    for i in range(1, len(label)):
                        if label[i].isupper():
                            s += str(' / ') + label[i]
                        else:
                            s += label[i]
                    ans += f"{s}: {probability * 100:.2f}%\n"
                bot.send_message(message.chat.id, ans, reply_markup=markup2)
            except Exception as e:
                bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ!')


    elif message.text == '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑':
        if not users[message.chat.id][1]:
            bot.send_message(message.chat.id, '–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
        if not users[message.chat.id][0]:
            bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
        elif users[message.chat.id][0] and users[message.chat.id][1]:
            img = open(users[message.chat.id][1], 'rb')
            bot.send_message(message.chat.id,
                             "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: " + users[message.chat.id][0] + '\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ')  # –∑–∞—Ç—ã—á–∫–∞
            bot.send_photo(message.chat.id, img)
            bot.send_message(message.chat.id,
                             "–í—Å–µ –≤–µ—Ä–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑?\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ",
                             reply_markup=markup3)
        # –º–æ–¥–µ–ª—å–∫–∞
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.chat.id, '–¢—Ä–µ–±—É—é—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ/—Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: ', reply_markup=markup2)
    else:
        try:
            if message.text not in ['–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑', '–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞üõí',
                                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì']:
                users[message.chat.id][0] = message.text
                save_data()
                bot.reply_to(message, '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!:')
        except Exception as e:
            bot.send_message(message.chat.id, "–û—à–∏—é–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")


bot.infinity_polling()

